{"ast":null,"code":"import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { split } from \"apollo-link\";\nconst httpLink = createHttpLink({\n  uri: \"http://localhost/gql/v1/graphql\"\n});\nconst wsLink = new WebSocketLink({\n  uri: \"ws://localhost/gql/v1/graphql\",\n  options: {\n    reconnect: true,\n    connectionParams: () => {\n      return {\n        headers: {\n          \"x-hasura-admin-secret\": \"fullstackdemopw\"\n        }\n      };\n    }\n  }\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  return {\n    headers: { ...headers,\n      \"x-hasura-admin-secret\": \"fullstackdemopw\"\n    }\n  };\n});\nconst link = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}, wsLink, authLink.concat(httpLink));\nexport const client = new ApolloClient({\n  link: link,\n  cache: new InMemoryCache()\n});","map":{"version":3,"sources":["/Users/Q/Tech/FullStackDemo/src/note_frontend/src/GraphqlClient.js"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","WebSocketLink","getMainDefinition","split","httpLink","uri","wsLink","options","reconnect","connectionParams","headers","authLink","_","link","query","definition","kind","operation","concat","client","cache"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,cAAtC,QAA4D,gBAA5D;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,MAAMC,QAAQ,GAAGL,cAAc,CAAC;AAC9BM,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,MAAMC,MAAM,GAAG,IAAIL,aAAJ,CAAkB;AAC/BI,EAAAA,GAAG,EAAE,+BAD0B;AAE/BE,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,IADJ;AAEPC,IAAAA,gBAAgB,EAAE,MAAM;AACtB,aAAO;AACLC,QAAAA,OAAO,EAAE;AACP,mCAAyB;AADlB;AADJ,OAAP;AAKD;AARM;AAFsB,CAAlB,CAAf;AAcA,MAAMC,QAAQ,GAAGX,UAAU,CAAC,CAACY,CAAD,EAAI;AAAEF,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,SAAO;AACLA,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEP,+BAAyB;AAFlB;AADJ,GAAP;AAMD,CAP0B,CAA3B;AASA,MAAMG,IAAI,GAAGV,KAAK,CAChB,CAAC;AAAEW,EAAAA;AAAF,CAAD,KAAe;AACb,QAAMC,UAAU,GAAGb,iBAAiB,CAACY,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CAPe,EAQhBX,MARgB,EAShBK,QAAQ,CAACO,MAAT,CAAgBd,QAAhB,CATgB,CAAlB;AAYA,OAAO,MAAMe,MAAM,GAAG,IAAItB,YAAJ,CAAiB;AACrCgB,EAAAA,IAAI,EAAEA,IAD+B;AAErCO,EAAAA,KAAK,EAAE,IAAItB,aAAJ;AAF8B,CAAjB,CAAf","sourcesContent":["import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\"\nimport { setContext } from \"@apollo/client/link/context\"\nimport { WebSocketLink } from \"apollo-link-ws\"\nimport { getMainDefinition } from \"apollo-utilities\"\nimport { split } from \"apollo-link\"\nconst httpLink = createHttpLink({\n  uri: \"http://localhost/gql/v1/graphql\",\n})\n\nconst wsLink = new WebSocketLink({\n  uri: \"ws://localhost/gql/v1/graphql\",\n  options: {\n    reconnect: true,\n    connectionParams: () => {\n      return {\n        headers: {\n          \"x-hasura-admin-secret\": \"fullstackdemopw\",\n        },\n      }\n    },\n  },\n})\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      \"x-hasura-admin-secret\": \"fullstackdemopw\",\n    },\n  }\n})\n\nconst link = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    )\n  },\n  wsLink,\n  authLink.concat(httpLink)\n)\n\nexport const client = new ApolloClient({\n  link: link,\n  cache: new InMemoryCache(),\n})\n"]},"metadata":{},"sourceType":"module"}